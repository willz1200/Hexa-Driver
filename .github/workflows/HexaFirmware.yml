# This is the name of the workflow, visible on GitHub UI.
name: Hexa Driver Firmware

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: [push, pull_request]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  # This is the name of the job - can be whatever.
  Hexa-Driver:

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    strategy:
      matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`, in this case a
        # total of 1.
        arduino-platform: ["Hexa_Rev_1.0"]

        include:
          - arduino-platform: "Hexa_Rev_1.0"
            fqbn: "Arduino_STM32:STM32F1:mapleMini:bootloader_version=bootloader20,cpu_speed=speed_72mhz,opt=osstd"

    # This is the platform GitHub will use to run our workflow
    runs-on: windows-latest

    # This is the list of steps this job will run.
    steps:
      # Clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@v2

      # Configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1.0.0

      ###---\/---REMOVED---\/--- : I think theres a bug in the arduino-cli, solution is to inject the url directly into arduino-cli.yaml as seen below...
      
      # Install the STM32F1 package config
      #- name: Install package config
      #  run: |
      #    arduino-cli core update-index --additional-urls https://lemzo.co.uk/Arduino_STM32/package_Arduino_STM32_index.json
      #    arduino-cli core search Arduino_STM32 --additional-urls https://lemzo.co.uk/Arduino_STM32/package_Arduino_STM32_index.json
      
      ###---/\---REMOVED---/\---

      # Install the STM32F1 package config, Core index update to pull latest json file from server
      - name: Generate arduino-cli.yaml and Inject Server URL
        run: |
          arduino-cli config init
          $file = 'C:\Users\runneradmin\AppData\Local\Arduino15\arduino-cli.yaml'
          $find = '  additional_urls: []'
          $replace = '  additional_urls: [https://lemzo.co.uk/Arduino_STM32/package_Arduino_STM32_index.json]'
          (Get-Content $file).replace($find, $replace) | Set-Content $file
          arduino-cli core update-index

      # Install STM32F1 package using zip found in json file
      - name: Install STM32F1 Package and arm-none-eabi-gcc Toolchain
        run:
          arduino-cli core install Arduino_STM32:STM32F1

      # Check the STM32F1 package has been installed
      #- name: List Platforms Installed
      #  run: arduino-cli core list

      # Finally, we compile the firmware, using the FQBN that was set in the build matrix.
      # Storing arduino-cli output in CompilerLog.txt as github actions doesn't appear to retain powershell variables between build steps :(
      - name: Compile Hexa Driver Firmware
        run: |
          arduino-cli compile --fqbn ${{ matrix.fqbn }} ./Firmware/Hexa > CompilerLog.txt 2>&1
          Get-Content -Path ./CompilerLog.txt -Raw
        #run: $CompilerLog = & arduino-cli compile --fqbn ${{ matrix.fqbn }} ./Firmware/Hexa 2>&1

      # Display firmware flash/RAM usage as a warning so its tagged as an annotation...
      # Use windows powershell script to extract flash/RAM usage of firmware
      - name: Fetch Compilation Log
        run: |
          $CompilerLog = Get-Content -Path ./CompilerLog.txt -Raw

          function GetSubStr {
            $s = $args[0]
            $e = $args[1]
            $sLen = $s.length
            $start = $CompilerLog.IndexOf($s) + $sLen
            $len = $CompilerLog.IndexOf($e, $start) - $start
            $CompilerLog.Substring($start, $len)
          }

          Write-Host "$CompilerLog"

          $FlashUsed = GetSubStr "Sketch uses " " bytes "
          $FlashMax = GetSubStr " space. Maximum is " " bytes."
          $FlashPercent = [math]::Round( 100*($FlashUsed/$FlashMax), 1)
          $RamUsed = GetSubStr "Global variables use " " bytes "
          $RamMax = GetSubStr " variables. Maximum is " " bytes."
          $RamPercent = [math]::Round( 100*($RamUsed/$RamMax), 1)

          Write-Host "::warning:: Flash($FlashPercent%): $FlashUsed / $FlashMax, RAM($RamPercent%): $RamUsed / $RamMax"
          
